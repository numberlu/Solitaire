NAME: Rendering start board 
    DEMO: 
    -> After pressing 'Start Game', a board appears with the tableau - 7 columns of cards overlayed on each other, all 
    face down except the last ones, the stock - all cards face down stacked on top of each other, and the foundations - empty slots

    NOTES:
    -> Using JFrame to create the window where the game will be played in.
    -> Using the class "Point" to use the x and y coordinates to position the cards and such.
    -> Using the image class from Swing to set the image on every face up cards on the board (Cards will be stored in a separate file)

NAME: Stacking cards on the foundations
    DEMO: 
    -> If foundation stack is empty, only allow ACE cards to be stacked, taken from tableau
    -> The cards can only be stacked in numerical order after the ACE and jeff, queen and king after

    NOTES:
    -> When stacking the cards into foundations, check using if-statements what is the last stacked item in the stack foundation.
    -> If the card is valid to be stacked, using Swing,  move the card from the tableau stack they were from to the foundation, removing the card
    from the tableau stack it came from.
    -> (We could make it a preferance to transfer cards to foundations if possible)
    

NAME: Revealing cards in the stock
    DEMO:
    -> Press the stock to reveal next card in the stock
    -> The revealed card gets put into waste

    NOTES:
    -> Since the stock is a STACK of cards, we could implement the functions of a STACK. 
    -> Using "isEmpty" to check whether there are cards in the stock
    -> If it is empty, move the cards from the waste back to the stock inorder of a STACK
    -> If it isn't empty, remove the card from the stock and add it to the waste STACK


NAME: Stacking (overlaying) the cards in the waste from the stock
    DEMO:
    -> The waste is overlayed one (face up) card at a time
    -> There are no more than three cards at a time in the waste

    NOTES:
    -> Using OverlapLayout (I'm no longer sure about this lol)


NAME: Clicking the stacks
    DEMO:
    -> Clicking a card will allow the card to perform its functionalities such as:
        -> Clicking a card on the stock will move the card to the waste
        -> Clicking the card on a tableau stack will either move it to another tableau stack (if conditions met),
        move the card to the foundation (if conditions met) or do nothing

    NOTES:
    -> Using "MouseEvent" to get the current position of the mouse when the LMB is pressed
    -> Checks the position of the mouse and see where that card belongs to and perform necessary actions depending whichever class it belongs to


NAME: Revealing cards on the tableau
    DEMO: 
    -> After the card or the stack of cards is moved to another place, 
    the top of the tableau stack (faced down) will be faced up, showing its contents

    NOTES:
    -> Using a boolean variable, we check whether the card is at the top of the stack. If so,
    we will set the boolean variable to true and show the card face up if the boolean variable is true.


NAME: Not allowing stacks starting with other cards than king to be moved to an empty spot
    DEMO:
    -> If there is an empty column in the tableau, only allow (stacks starting with) the KING card to be placed before any other card
    -> All other stacks go back to their previous place

    NOTES:
    -> Check the tableau stack using the isEmpty method, if so, allow a king card to be moved there if the user wishes to do so.


NAME: Moving stack of cards 
    DEMO: 
    -> A stack of cards is considered a moveable stack when it's cards go in a numerical order and the cards are constantly 
    altering between red and black

    NOTES: 
    -> Check whether this condition is met with isInNumericalOrder() and isAlternating().


NAME: Clicking on a card (or a stack) that can be moved to another stack
    DEMO:
    -> Cards can only be moved to another tableau stack if:
        -> The top card of the tableau stack they are moving to has the opposite colour
        -> The number of the card is 1 less than the card on the top of the tableau stack

    NOTES:
    -> Using the functionality of a stack, only move the card to the other tableau stack if the conditions are met.
    -> The other tableau stack must not be empty, unless a king is being moved.


NAME: Restacking the cards on the waste back to the stock
    DEMO:
    -> If the stock is empty and the user wants to reveal more cards on the stock, move the cards back into the stock from the top
    until the waste doesn't have any cards left.

    NOTES:
    -> Using pop the cards of the waste stack and push the card into the stock.
    -> Keep on checking if the waste stack is empty, if so, cards have successfully been moved back into the stock.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

EXTRA:
NAME: Point system (Stacking more cards on waste from stock takes points away)
    DEMO:
    -> Moving cards back from the waste to the stock deducts 1 point
    -> Moving a card to the foundation from any stack adds 5 points
    -> Display (top middle or terminal?) and change the points when specific actions occur

    NOTES:
    -> Check which action has taken place (Where the mouse clicked and if conditions are met) and change points accordingly


NAME: Undo button for the last move
    DEMO: 
    -> Returns the lastly moved card (or the stack) to its previous position
        -> From foundation to tableau/ waste
        -> From one column of tableau to another
        -> From waste to the stock

    NOTES:
    -> Keep records of one previous move to be able to reverse the move if the user chooses to.


NAME: Allowing the (stacks starting with) king to be moved to an empty spot
    DEMO:
    -> If there are no cards in a tableau stack, a king can be moved to the empty tableau stack

    NOTES:
    -> Check if tableau stack is empty, if so move king to empty tableau stack
    -> (We could make it a preferance to transfer cards to foundations if possible)

NAME: Autostacking when stock and waste are empty, and the cards on the tableau are all face up
    DEMO: 
    -> à¶ž kinda sus ngl
    -> When the conditions are met a button appears close to the waste that offers to 'Solve' and stack all the remaining 
    cards not in the foundation.

    NOTES:
    -> Do we need an animation for that? 
    // (I think animation might be too extra maybe we could say that if waste and )

------------------------------------------------------------------------------------------------------------------------------------------------------------------

LEARNING GOALS:

-> Git?
-> Test Driven devevlopment? (Just like previous assignments)
-> Diving deeper with Swing usage




