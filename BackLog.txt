HIGH PRIORITY

NAME: Rendering start board 
    DEMO: 
    -> After pressing 'Start Game', a board appears with the tableau - 7 columns of cards overlayed on each other, all 
    face down except the last ones, the stock - all cards face down stacked on top of each other, and the foundations - empty slots

    NOTES:
    -> Using JFrame to create the window where the game will be played in.
    -> Creating different classes for different parts of solitaire such as a class for the tableau and a class for the foundation
    -> Using the image class from Swing to set the image on every face up cards on the board (Cards will be stored in a separate file)

NAME: Stacking cards on the foundations
    DEMO: 
    -> If foundation stack is empty, only allow ACE cards to be stacked, taken from tableau
    -> The cards can only be stacked in numerical order after the ACE and jeff, queen and king after

    NOTES:
    -> When stacking the cards into foundations, check using if-statements what is the last stacked item in the stack foundation.
    -> If the card is valid to be stacked, using Swing,  move the card from the tableau stack they were from to the foundation, removing the card
    from the tableau stack it came from.    

NAME: Revealing cards in the stock
    DEMO:
    -> Press the stock in the deck to reveal next card in the stock
    -> The revealed card gets put into waste

    NOTES:
    -> We would allow the cards to cycle through the waste one by one once all cards have been revealed
    -> Since the stock is a STACK of cards, we could implement the functions of a STACK. 

NAME: Clicking the stacks
    DEMO:
    -> Clicking a card will allow the card to perform its functionalities such as:
        -> Clicking a card on the stock will move the card to the waste
        -> Clicking the card on a tableau stack will either move it to another tableau stack (if conditions met),
        move the card to the foundation (if conditions met) or do nothing

    NOTES:
    -> Using "MouseEvent" to get the current position of the mouse when the LMB is pressed
    -> Checks the position of the mouse and see where that card belongs to and perform necessary actions depending whichever class it belongs to

NAME: Initialising the tableau stack
    DEMO: 
    -> When initialising, each column on the tableau have different number of cards initially.
        -> So the first column will 1 card , second column will have 2 and so on respectively.
        -> The top card of the colmn stack will be faced up and the rest of the cards will be faced down

    NOTES:
    -> Add a mouselistener to each card on the tableau so that they can act independently
    -> Using a double if-statement to create the column stack respectively to the number of cards they have

NAME: Revealing cards on the tableau
    DEMO: 
    -> After the card or the stack of cards is moved to another place, 
    the top of the tableau stack (faced down) will be faced up, showing its contents

    NOTES:
    -> Using a boolean variable, we check whether the card is at the top of the stack. If so,
    we will set the boolean variable to true and show the card face up if the boolean variable is true.

NAME: Clicking on a card on the tableau that can be moved to another tableau stack
    DEMO:
    -> Cards can only be moved to another tableau stack if:
        -> The top card of the tableau stack they are moving to has the opposite colour
        -> The number of the card is 1 less than the card on the top of the tableau stack

    NOTES:
    -> The other tableau stack must not be empty, unless a king is being moved. ???
    -> Check whether the stack that the card is moving to has a number less than the card itself AND it has a different colour
    -> We will assign each card a color and a number in the Card class

------------------------------------------------------------------------------------------------------------------------------------------------------------------

MID PRIORITY
NAME: Moving stack of cards 
    DEMO: 
    -> A stack of cards is considered a moveable stack when it's cards go in a numerical order and the cards are constantly 
    altering between red and black

    NOTES: 
    -> Check whether there are cards above the FACED UP card (using isFaceUp method) and if so, using a for loop and move the card to the other
    tableau column stack.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

LOW PRIORITY:

NAME: Restacking the cards on the waste back to the stock
    DEMO:
    -> If the stock is empty and the user wants to reveal more cards on the stock, move the cards back into the stock from the top
    until the waste doesn't have any cards left.

    NOTES:
    -> Using pop the cards of the waste stack and push the card into the stock.
    -> Keep on checking if the waste stack is empty, if so, cards have successfully been moved back into the stock.

NAME: Allowing the (stacks starting with) king to be moved to an empty spot
    DEMO:
    -> If there are no cards in a tableau stack, a king can be moved to the empty tableau stack

    NOTES:
    -> Check if tableau stack is empty, if so move king to empty tableau stack
    -> (We could make it a preferance to transfer cards to foundations if possible)

????
NAME: Not allowing stacks starting with other cards than king to be moved to an empty spot
    DEMO:
    -> If there is an empty column in the tableau, only allow (stacks starting with) the KING card to be placed before any other card
    -> All other stacks go back to their previous place

    NOTES:
    -> Check the tableau stack using the isEmpty method, if so, allow a king card to be moved there if the user wishes to do so.
????

à¶ž
------------------------------------------------------------------------------------------------------------------------------------------------------------------

LEARNING GOALS:

-> Git?
-> Test Driven devevlopment? (Just like previous assignments)
-> Diving deeper with Swing usage




